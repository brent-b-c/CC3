import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Node class representing each node in the binary search tree
class Node {
    int value;
    Node left, right;

    public Node(int value) {
        this.value = value;
        left = right = null;
    }
}

// Binary Search Tree class
class BinarySearchTree {
    Node root;

    public BinarySearchTree() {
        root = null;
    }

    // Insert method to build the BST based on the input array
    public void insert(int[] values) {
        for (int value : values) {
            if (value != -1) {
                insertRec(value);
            }
        }
    }

    // Recursive method to insert values into the BST
    private void insertRec(int value) {
        root = insertNode(root, value);
    }

    // Helper method to insert a node into the BST
    private Node insertNode(Node root, int value) {
        if (root == null) {
            return new Node(value);
        }

        if (value < root.value) {
            root.left = insertNode(root.left, value);
        } else if (value > root.value) {
            root.right = insertNode(root.right, value);
        }

        // Ignore duplicate values
        return root;
    }

    // Inorder Traversal
    public void inorder(List<Integer> result) {
        inorderRec(root, result);
    }

    private void inorderRec(Node root, List<Integer> result) {
        if (root != null) {
            inorderRec(root.left, result);
            result.add(root.value);
            inorderRec(root.right, result);
        }
    }

    // Preorder Traversal
    public void preorder(List<Integer> result) {
        preorderRec(root, result);
    }

    private void preorderRec(Node root, List<Integer> result) {
        if (root != null) {
            result.add(root.value);
            preorderRec(root.left, result);
            preorderRec(root.right, result);
        }
    }

    // Postorder Traversal
    public void postorder(List<Integer> result) {
        postorderRec(root, result);
    }

    private void postorderRec(Node root, List<Integer> result) {
        if (root != null) {
            postorderRec(root.left, result);
            postorderRec(root.right, result);
            result.add(root.value);
        }
    }

    // Convert BST to 1-D array representation
    public int[] toArray() {
        List<Integer> result = new ArrayList<>();
        inorder(result); // Using inorder traversal to get sorted order
        return result.stream().mapToInt(i -> i).toArray();
    }
}

// Main class to run the program
public class BinarySearchTreeProgram {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String tryAgain;

        do {
            BinarySearchTree bst = new BinarySearchTree();

            // Input for the number of elements to add
            System.out.print("Enter the number of elements you want to add to the binary search tree: ");
            int n = scanner.nextInt();

            // Input for the binary search tree
            int[] values = new int[n]; // Array for the binary search tree
            System.out.println("Enter " + n + " elements for the binary search tree:");
            for (int i = 0; i < n; i++) {
                System.out.print("Element at index " + i + ": ");
                values[i] = scanner.nextInt();
            }

            // Insert values into the binary search tree
            bst.insert(values);

            // Display traversals
            System.out.println("\nPreorder Traversal:");
            List<Integer> preorderResult = new ArrayList<>();
            bst.preorder(preorderResult);
            System.out.println(preorderResult);

            System.out.println("Inorder Traversal:");
            List<Integer> inorderResult = new ArrayList<>();
            bst.inorder(inorderResult);
            System.out.println(inorderResult);

            System.out.println("Postorder Traversal:");
            List<Integer> postorderResult = new ArrayList<>();
            bst.postorder(postorderResult);
            System.out.println(postorderResult);

            System.out.println("Sorted Array Representation (Inorder Traversal):");
            int[] sortedArray = bst.toArray();
            System.out.println(java.util.Arrays.toString(sortedArray));

            System.out.print("\nDo you want to try again? (yes/no): ");
            tryAgain = scanner.next();
        } while (tryAgain.equalsIgnoreCase("yes"));

        scanner.close();
    }
}
